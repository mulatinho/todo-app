extends ../layout.pug

block content
  - const taskNow = task ? task : null;
  .container-fluid
    .row
      .offset-lg-2.offset-md-1.offset-sm-0
      .col-lg-8.col-md-10.col-sm-12
        center
          h1.textOpacity Todo-App RESTful
        br
        br
        
        #showTasks(data-href='Tasks')
          .row
            .col-sm-10.col-xs-8.col-8.form-group
              input#searchText.lessz.form-control.input-md(type="text", name="searchText", required='') 
              label.form-control-placeholder(for="searchText") Search For..
              | &nbsp; &nbsp;
              br
            .offset-sm-0.offset-xs-2.offset-2
            .col-sm-2.col-2
              ul.pagination.float-right
                li.page-item.ldgrey.lessz
                  a.previous.page-link &lt;
                li.page-item.ldgrey.lessz
                  a.next.page-link &gt;
          .table-responsive
            table.table.table-hover.table-striped
              thead
                th Date
                th Title
                th Owner
                th Tags
                th.text-center !!!
              tbody
                if taskList
                  each task in taskList
                    tr.click-tr(data-href=task.id)
                      - const options = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' }
                      - const dateformatted = new Intl.DateTimeFormat('en-US', options).format(task.createdAt).replace(/ [AP]M/, '')
                      td.lessz.nowrap= dateformatted
                      td.lessz= task.title
                      td.lessz= task.user.name
                      td.lessz= task.tags
                      td.lessz.nowrap
                        center
                          i.fa.fa-edit.click-tr(data-href=task.id)
                          | &nbsp; 
                          i.fa.fa-trash-alt.click-delete(data-href=task.id)
            if !taskList
              p None
              br
          .row
            .col-sm-4.col-xs-6.col-6
              button.btn.btn-block.btn-dark.btn-action.lessz(type="button", data-href="AddOrEditTask") Create Task
            .offset-sm-4.offset-xs-0.offset-0
            .col-sm-4.col-xs-6.col-6
              p.float-right.lessz Showing 20 tasks per page at maximum
        #showAddOrEditTask.hidden(data-href='AddOrEditTask')
          form#formTask(action="/tasks", method="POST")
            .row
              .col
                center
                  h3 New Task
                  br
            .row
              .col.form-group
                input#taskTitle.form-control(type="text", name="taskTitle", required='', value=taskNow ? taskNow.title : "")
                label.form-control-placeholder(for="taskTitle") Task Title
                br
            .row
              .col.form-group
                textarea#taskDescription.form-control(type="text", rows="5", name="taskDescription", required='')= taskNow ? taskNow.description : ""
                label.form-control-placeholder(for="taskDescription") Task Description
            .row
              .col
                hr(style="border: 0.5px solid #808080; background-color: #00110; width: 100%")
            .row
              .col-6
                p.lessz Tags: 
                  span#taskTags= taskNow ? taskNow.tags : "none"
              .col-4.form-group
                input#taskTagName.form-control.lessz(type="text", name="taskTagName", required='')
                label.form-control-placeholder.lessz(for="taskTagName") New Tag
              .col-2
                button.btn.btn-block.btn-secondary.btn-newtag.lessz(type="button") +
            br
            .row
              .col
                if taskNow
                  button.btn.btn-block.btn-dark.lessz.btn-update-task(type="button") Update Task
                else
                  button.btn.btn-block.btn-dark.lessz.btn-create-task(type="button") Create Task
              .col
                if taskNow
                  button.btn.btn-block.btn-secondary.btn-delete-task.lessz(type="button", data-href="Tasks") Delete
                else
                  button.btn.btn-block.btn-secondary.btn-action.lessz(type="button", data-href="Tasks") Go Back
            
        #showDeleteTask(data-href='DeleteTask').hidden  
          center
            h3 Attention!
          br
          br
          center
            p Please take a moment and confirm your action against the task entitled
            p(style="color: #696969")= taskNow ? taskNow.title : "Not Defined"
            p Created by 
              span(style="color: #696969") #{taskNow ? taskNow.name : "Anonymous"} 
              |  on  
              span(style="color: #696969") #{taskNow ? taskNow.created_at : "20/09/1969 20:02:12"}
          br
          br
          p Do you really want to delete this task?
          br
          .row
            .col
              button.btn.btn-block.btn-dark.lessz(type="button") Yes
            .col
              button.btn.btn-block.btn-secondary.btn-action.lessz(type="button", data-href="Tasks") No 
          
      .offset-lg-2.offset-md-1.offset-sm-0
  
  script.
    $(document).ready(function() {
      var page        = !{page}	
      const urlParams = new URLSearchParams(window.location.search);
      var sortBy      = urlParams.get('sort');
      var orderBy     = urlParams.get('order');
      var filterBy    = urlParams.get('search');
      let tags = []
      let tagsLiterally = $('#taskTags').text();
      const taskNow = !{JSON.stringify(taskNow)}
      
      if (sortBy === null) { sortBy = "createdAt" }
      if (filterBy === null) { filterBy = "" }
      if (orderBy === null) { orderBy = "DESC" }
      
      $("#searchText").val(filterBy);
      
      $(".previous").click(function() {
        var gopage = (page - 1) < 0 ? 0 : --page;
        window.location.href = "/tasks?sort=" + sortBy + "&order=" + orderBy + "&page=" + gopage + "&search=" + filterBy;
      });
      
      $(".next").click(function() {
        const gopage = ++page;
        window.location.href = "/tasks?sort=" + sortBy + "&order=" + orderBy + "&page=" + gopage + "&search=" + filterBy;
      });
      
      $('.click-sort').each(function() {
        const item = $(this).data("href");
        if (item == sortBy) { 
          if (orderBy == "DESC") {
            $(this).append("<i class='fa fa-fw fa-sort-amount-up my-1 float-right'></i>");
          } else {
            $(this).append("<i class='fa fa-fw fa-sort-amount-down my-1 float-right'></i>");
          }
        }
      });
      
      if (taskNow !== null) {
        $('div[id^="show"]').addClass("hidden")
        $('#showAddOrEditTask').removeClass("hidden");
      }
      
      $(".btn-action").click(function(evt) {
        const data = "show" + $(this).data("href");
        console.log(data)
        $('div[id^="show"]').addClass("hidden")
        $('#' + data).removeClass("hidden");
      });
    
      $(".click-delete").click(function(evt) {
        evt.preventDefault();
        const data = $(this).data("href");
        console.log(data)
      });
        
      $(".click-tr").click(function(evt) {
        const data = $(this).data("href");
        window.location.href = `/tasks/${data}`
        console.log(data)
      });
      
      $('.btn-newtag').click(function(evt) {
        const taskTagName = $('#taskTagName').val();
        let tagsNow = [ ...tags, taskTagName ]
        tags = [ ...new Set(tagsNow) ]
        
        tags.forEach(e => {
          if (!tagsLiterally.length) {
            tagsLiterally = `${e}`
          } else {
            tagsLiterally = `${tagsLiterally}, ${e}`
          }
        })
        
        $("#taskTags").text(tagsLiterally)
      });
      
      $('.btn-create-task').click(function(evt) {
        const taskTitle = $('#taskTitle').val();
        const taskDescription = $('#taskDescription').val();
        const taskTags = $('#taskTags').text();
        
        const data = { taskTitle: taskTitle, taskDescription: taskDescription, taskTags: taskTags };
        
        fetch('/tasks', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        })
        .then(response => {
          console.log(response);
          if (response.status == 200) { window.location.href = '/tasks'}
        });
      })
    
      $('.btn-update-task').click(function(evt) {
        const taskTitle = $('#taskTitle').val();
        const taskDescription = $('#taskDescription').val();
        const taskTags = $('#taskTags').text();
        
        const data = { taskTitle: taskTitle, taskDescription: taskDescription, taskTags: taskTags };
        const uri = `/tasks/${taskNow.id}`
          
        fetch(uri, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        })
        .then(response => {
          console.log(response);
          if (response.status == 200) { window.location.href = '/tasks'}
        });
      })
      
      $('#searchText').keypress(function(event){
        var keycode = (event.keyCode ? event.keyCode : event.which);
        if(keycode == '13'){
          const searchText = $("#searchText").val();
          window.location.href = "/tasks?sort=" + sortBy + "&order=" + orderBy + "&page=" + page + "&search=" + searchText;
        }
      });
    });
